name: Add or Remove Event via Email

on:
  repository_dispatch:
    types: [add_event, remove_event]

jobs:
  update-events:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Prepare event JSON
        run: |
          cat << 'EOF' > write-event.js
          const fs = require("fs");
          const event = JSON.parse(process.env.EVENT_PAYLOAD);
          fs.writeFileSync("new_event.json", JSON.stringify(event, null, 2));
          EOF

          node write-event.js
        env:
          EVENT_PAYLOAD: ${{ toJson(github.event.client_payload) }}

      - name: Write modify-events.js
        run: |
          cat << 'EOF' > modify-events.js
          const fs = require('fs');
          const path = './wardboard/events.json';
          let newEvent = require('./new_event.json');
          const eventType = process.env.EVENT_TYPE;

          // --- Normalize date ---
          if (newEvent.date) {
            const parsedDate = new Date(newEvent.date);
            if (!isNaN(parsedDate)) {
              newEvent.date = parsedDate.toISOString().split('T')[0];
            } else {
              console.warn("Invalid date format. Keeping original:", newEvent.date);
            }
          }

          // --- Normalize time ---
          if (newEvent.time) {
            const timeText = newEvent.time.trim();
            const match = timeText.match(/(\\d{1,2})(?::(\\d{2}))?\\s*(AM|PM)?/i);
            if (match) {
              let hour = parseInt(match[1], 10);
              const minute = parseInt(match[2] || '0', 10);
              const meridian = match[3] ? match[3].toUpperCase() : null;

              if (meridian === 'PM' && hour < 12) hour += 12;
              if (meridian === 'AM' && hour === 12) hour = 0;

              const pad = n => n.toString().padStart(2, '0');
              newEvent.time = pad(hour) + ':' + pad(minute);
            } else {
              console.warn("Could not parse time:", newEvent.time);
            }
          }

          let events = [];
          if (fs.existsSync(path)) {
            try {
              events = JSON.parse(fs.readFileSync(path, 'utf8'));
            } catch {
              console.warn("Failed to parse existing events.json. Starting fresh.");
            }
          }

          if (eventType === "add_event") {
            const title = newEvent.title.toLowerCase();
            const existingIndex = events.findIndex(e => e.title.toLowerCase() === title);
            if (existingIndex !== -1) {
              console.log("Updating existing event:", newEvent.title);
              events[existingIndex] = newEvent;
            } else {
              console.log("Adding new event:", newEvent.title);
              events.push(newEvent);
            }
          } else if (eventType === "remove_event") {
            const titleToRemove = newEvent.title.toLowerCase();
            const before = events.length;
            events = events.filter(e => e.title.toLowerCase() !== titleToRemove);
            const after = events.length;
            console.log(`Removed ${before - after} event(s) titled "${newEvent.title}"`);
          }

          fs.writeFileSync(path, JSON.stringify(events, null, 2));
          EOF

      - name: Run modify-events.js
        run: node modify-events.js
        env:
          EVENT_TYPE: ${{ github.event.action || github.event.event_type }}

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add wardboard/events.json

          # If nothing to commit, exit gracefully
          if git diff --cached --quiet; then
            echo "No changes to commit. Skipping push."
            exit 0
          fi

          if [[ "${{ github.event.event_type }}" == "remove_event" ]]; then
            git commit -m "Remove event: ${{ github.event.client_payload.title }}"
          else
            git commit -m "Add event: ${{ github.event.client_payload.title }}"
          fi

          git push origin HEAD:${{ github.ref_name }}
